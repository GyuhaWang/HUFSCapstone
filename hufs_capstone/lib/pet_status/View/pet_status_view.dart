import 'dart:convert';
import 'dart:io';
import 'package:csv/csv.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:get/get.dart';
import 'package:hufs_capstone/pet_info/ViewModel/pet_info_model.dart';
import 'package:hufs_capstone/pet_status/ViewModel/pet_status_model.dart';
import 'package:tflite_flutter/tflite_flutter.dart';

class PetStatus extends StatefulWidget {
  PetInfoModel petInfos;
  PetStatus({super.key, required this.petInfos});

  @override
  State<PetStatus> createState() => _PetStatusState();
}

class _PetStatusState extends State<PetStatus> {
  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    // loadModel().then((value) {
    //   setState(() {});
    // });
  }

// final interpreter = await Interpreter.fromAsset('assets/best_model.tflite');

  double pageHorizontalPadding = 20;

  List<File> csv_data = [];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("HUFS CAPSTONE")),
      body: SizedBox(
          width: double.infinity,
          height: double.infinity,
          child: Padding(
            padding: EdgeInsets.symmetric(horizontal: pageHorizontalPadding),
            child: SingleChildScrollView(
              scrollDirection: Axis.vertical,
              child: Column(
                children: [
                  Container(
                    width: double.infinity,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          "코코의 현재 활동 상태는",
                          style: TextStyle(
                              color: Colors.black,
                              fontWeight: FontWeight.bold,
                              fontSize: 24),
                        ),
                        Row(
                          children: [
                            Text(
                              "12km/h",
                              style: TextStyle(
                                  color: Colors.red[400],
                                  fontWeight: FontWeight.bold,
                                  fontSize: 24),
                            ),
                            Text(
                              "로 달리고 있어요",
                              style: TextStyle(
                                  color: Colors.black,
                                  fontWeight: FontWeight.bold,
                                  fontSize: 24),
                            )
                          ],
                        )
                      ],
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.only(top: 24),
                    child: petInfo(data: widget.petInfos),
                  ),
                  Padding(
                    padding: const EdgeInsets.only(top: 24),
                    child: SelectSampleData(),
                  )
                ],
              ),
            ),
          )),
    );
  }

  Widget ImageWidget(String assetUrl) {
    return Container(
      decoration: const BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
              color: Colors.grey,
              blurRadius: 5.0,
              offset: Offset(5.0, 5.0),
              spreadRadius: 5.0)
        ],
      ),
      child: AspectRatio(
        aspectRatio: 100 / 101,
        child: ClipRRect(
            borderRadius: BorderRadius.circular(20),
            child: Image.asset(
              assetUrl,
              fit: BoxFit.fill,
              width: double.infinity,
            )),
      ),
    );
  }

  Widget petInfo({required PetInfoModel data}) {
    return Container(
        width: double.infinity,
        decoration: BoxDecoration(
            color: Color.fromRGBO(174, 222, 252, 0.5),
            borderRadius: BorderRadius.circular(12)),
        child: Padding(
          padding: const EdgeInsets.all(8.0),
          child: Row(
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              ClipRRect(
                borderRadius: BorderRadius.circular(999),
                child: Container(
                  width: 50,
                  height: 50,
                  color: Colors.white,
                ),
              ),
              Padding(
                padding: const EdgeInsets.only(left: 12),
                child: Container(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        '${data.name}',
                        style: TextStyle(
                            fontSize: 20, fontWeight: FontWeight.bold),
                      ),
                      Text(
                        '몸무게 : ${data.weight}',
                        style: TextStyle(
                            fontSize: 14, fontWeight: FontWeight.bold),
                      ),
                      Text(
                        '생일 : ${data.birth}',
                        style: TextStyle(
                            fontSize: 14, fontWeight: FontWeight.bold),
                      ),
                      Text(
                        '견종 : ${data.type}',
                        style: TextStyle(
                            fontSize: 14, fontWeight: FontWeight.bold),
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ));
  }
}

class SelectSampleData extends StatefulWidget {
  const SelectSampleData({super.key});

  @override
  State<SelectSampleData> createState() => _SelectSampleDataState();
}

class _SelectSampleDataState extends State<SelectSampleData> {
  List<File> csv_data = [];
  int selected_csv_index = 0;
  @override
  void initState() {
    // TODO: implement initState
    for (int i = 1; i < 11; i++) {
      csv_data.add(File('assets/csv/sample_data_${i}.csv'));
    }
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return status(fileList: csv_data);
  }

  Widget statusRow(
      {required PetStatusModel data,
      required bool isChecked,
      required Function onClick}) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Checkbox(
            value: isChecked,
            onChanged: (bool) {
              onClick();
            }),
        Text(data.file.path),
        GestureDetector(
          onTap: () async {
            String csv = await loadingCsvData(data.file.path);
            Get.dialog(Container(
                width: double.infinity,
                color: Colors.black,
                height: 400,
                child: SingleChildScrollView(
                    scrollDirection: Axis.vertical,
                    child: Text(
                      csv,
                      style: TextStyle(fontSize: 12, color: Colors.white),
                    ))));
          },
          child: Text(
            '자세히 보기',
            style: TextStyle(fontSize: 12),
          ),
        )
      ],
    );
  }

  Widget status({required List<File> fileList}) {
    return Container(
      width: double.infinity,
      decoration: BoxDecoration(
          color: Color.fromRGBO(255, 223, 223, 0.5),
          borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(8.0),
        child: Container(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                '선택된 데이터 번호: ${selected_csv_index + 1}',
                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
              ),
              Column(
                children: [
                  for (int i = 0; i < fileList.length; i++)
                    statusRow(
                      data: PetStatusModel(file: fileList[i]),
                      isChecked: i == selected_csv_index,
                      onClick: () async {
                        await modelrun();
                        setState(() {
                          selected_csv_index = i;
                        });
                      },
                    )
                ],
              ),
              GestureDetector(
                onTap: () async {
                  // await Get.dialog(Container(
                  //   width: 300,
                  //   height: 300,
                  //   child: Center(
                  //     child: Text("입력 완료"),
                  //   ),
                  // ));
                },
                child: Container(
                  decoration: BoxDecoration(
                      color: Colors.black,
                      borderRadius: BorderRadius.circular(12)),
                  width: double.infinity,
                  child: Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: Center(
                      child: Text(
                        "데이터 전송하기",
                        style: TextStyle(
                            color: Colors.white, fontWeight: FontWeight.bold),
                      ),
                    ),
                  ),
                ),
              )
            ],
          ),
        ),
      ),
    );
  }
}

Future<String> loadingCsvData(String path) async {
  final csvFile = await rootBundle.loadString(path);

  // return await csvFile
  //     .transform(utf8.decoder)
  //     .transform(
  //       CsvToListConverter(),
  //     )
  //     .toList();
  return csvFile;
}

modelrun() async {
  // 저장한 모델 파일을 가져옵니다.
  final interpreter =
      await Interpreter.fromAsset('assets/model/best_model.tflite');

  /*
 
       input 형식 전처리 과정 생략 
 
 
      */

  // 모델 output 형식으로 변수를 선언합니다.
  // 제가 사용할 모델의 아웃풋은 (1,7) 입니다.

  List<List<List<double>>> example_data = [
    [
      [0.07033932, -2.03709492, -0.28415566],
      [0.85248387, -0.21275833, 0.62070711],
      [-1.87811401, 0.3776534, -0.50127353],
      [1.82765715, 0.35360452, 1.50947063],
      [-0.45292763, 1.7447127, 1.58456832],
      [1.42723104, -0.40037772, -0.28292287],
      [-0.18932656, -0.26393195, -0.57449353],
      [1.46094808, -0.48221443, -0.96086145],
      [-0.27507815, -2.43936478, 0.71280702],
      [2.37639999, -0.0248158, -0.62191004],
      [-0.38082756, -0.85448068, -1.7265986],
      [1.84707575, 0.21551055, 0.33084519],
      [1.87056495, -1.22829588, 0.00450714],
      [-0.25340752, 0.28976696, -0.18597609],
      [1.48264124, 1.76906113, 1.06397483],
      [-0.41475749, -0.50292427, 0.31114509],
      [0.96758206, -0.16480547, -2.37479486],
      [-0.47294961, -0.8917836, -1.08063496],
      [-1.76042161, 0.66240584, -0.32883203],
      [-1.05355476, 1.87470085, -0.49942909],
      [-0.67023912, 0.99607955, -1.00513375],
      [1.47051992, -1.13148476, -0.5473535],
      [0.1048432, -0.15279655, 0.32711444],
      [-0.44082812, -0.11001371, 0.70100522],
      [0.39597321, -0.80548844, 1.01522249],
      [1.28681794, 0.16220875, -0.74174143],
      [0.93011777, -0.49560636, 0.39709891],
      [1.49356353, -0.13326724, 0.41027172],
      [-0.30825043, -0.32051262, -0.96845374],
      [-1.64342333, -1.0106563, 0.36295641],
      [0.30489487, 0.35915846, -0.41703742],
      [-0.57555022, -0.2772271, 0.00358969],
      [-0.11865611, 1.20502443, 1.63561314],
      [-0.35157326, 1.50831195, -0.46145356],
      [-1.13878447, 2.13145806, -0.60628082],
      [-0.45141267, -0.34997757, -0.55281863],
      [-1.02185564, 1.67101484, -0.41951781],
      [-0.0790039, -1.22501188, 0.01941439],
      [2.40613583, 1.04841567, -0.79030305],
      [-1.11033237, 1.04055593, -1.14773098],
      [-0.67456561, 1.49773143, -0.41861838],
      [-0.46983315, 0.32129622, -0.48922447],
      [-1.20324807, -1.0832346, 1.16825373],
      [0.95684037, 0.33273233, 1.24364954],
      [-1.09471277, -0.2449434, 0.7758362],
      [-1.53517865, -2.13878595, 1.94508733],
      [0.5802987, -0.85927931, 1.44219467],
      [0.55955743, -0.20650168, 0.10520256],
      [-0.64346474, -0.70939266, -0.36788895],
      [-1.34400729, 2.50689842, 0.35981257],
      [-0.94893526, -0.43363653, -2.27150944],
      [1.35613801, -0.43118994, -1.90985436],
      [-0.52061348, -0.35566479, -0.47152692],
      [-1.08073623, -1.51715593, 1.66989375],
      [-1.45748142, -0.43091683, -2.27350315],
      [1.10177789, 0.22692224, 1.27707276],
      [0.793398, -0.16873233, -0.23902925],
      [1.01305657, -1.32697248, 0.67269566],
      [0.17914955, 0.12748424, 1.04354601],
      [-1.19591681, -0.07601032, 0.14483259],
      [-0.49894886, -0.89006321, -1.15510557],
      [-0.40964555, -1.67570579, -1.28612569],
      [-1.31920929, 0.87495973, 0.71444856],
      [-1.47292984, 0.20298472, 0.12052215],
      [2.12433037, 0.05952578, 0.15727293],
      [1.15101348, -0.03057468, -1.3442722],
      [-0.34861825, -0.29629855, 0.51940145],
      [0.60206292, -1.09010724, 0.82384345],
      [2.01712557, -2.67864509, -0.69781307],
      [0.56999954, 0.16956381, -0.95196759],
      [0.88694563, 0.22868986, -0.3266472],
      [-0.13703401, 1.65007348, -1.12548757],
      [0.85924844, 0.8112522, -1.25362701],
      [-2.51800927, -1.1407906, -0.29576798],
      [-0.26859552, 2.26526049, 0.43993413],
      [0.28163982, -1.52379975, -0.25649334],
      [-1.424776, -0.21092494, 0.95325446],
      [-0.64346331, 0.93369567, -0.00943963],
      [-0.1158445, -0.57750393, 0.38263601],
      [-2.20545449, 1.18509218, -0.64870308],
      [0.08832261, 2.9129401, -0.67762826],
      [-0.72778481, -0.18006907, 2.04191253],
      [0.85432278, 0.40472071, -0.93246761],
      [-0.92635408, 0.13211379, -0.17598731],
      [-1.16884092, 0.13783594, 1.20180807],
      [1.31901498, 0.484558, 0.72041773],
      [-0.84087803, 0.67719411, 2.04504943],
      [-1.6546738, 0.75156831, 0.65533662],
      [-1.15895504, -0.83917861, 0.64626769],
      [0.51373645, 0.31356657, -0.28881361],
      [0.35921977, -0.10414682, 0.45161931],
      [0.00506204, -1.70195485, -1.2556872],
      [2.23380614, -0.14323511, -1.52159267],
      [-0.05616997, -0.67296845, -0.14803731],
      [0.69228582, -0.33153154, 0.66460713],
      [1.08304866, 0.5943478, 0.54852991],
      [0.84580199, 2.2924409, -0.97342719],
      [-0.68475406, 0.86472824, -0.84276527],
      [0.85612499, 0.08368109, -1.41231535],
      [-0.04956457, 2.38055977, -0.46670695],
      [0.62140491, -2.74871157, 0.93601263],
      [1.11969833, -0.50443443, 0.71343499],
      [0.09214531, 0.53112383, -0.43562129],
      [-0.64488526, 0.60211011, -0.09755412],
      [0.25786484, -0.74788381, 1.86860731],
      [0.22581279, 1.18121319, 0.75694899],
      [-0.57895799, -0.29097965, -0.39152623],
      [1.38295753, 1.29517901, -0.93116288],
      [1.73292218, -0.39123887, -0.22025529],
      [0.67499682, -2.14445664, 0.67825009],
      [-0.82113222, -0.50274972, 0.57721951],
      [-0.51314205, 2.45238146, -0.94415548],
      [-1.29133056, -1.43901199, 0.77280464],
      [2.69894391, 1.92741065, 1.92553532],
      [1.12493049, 1.67200739, -0.88629122],
      [0.20254073, -0.02407348, 0.87294151],
      [0.19627881, -1.17020801, -0.69766456],
      [2.68496869, 0.02676312, -1.04898471],
      [-0.44767374, -0.46302891, 0.30442264],
      [2.5617371, -0.97382096, -1.87485723]
    ]
  ];
  // interpreter.run(input,output),  input값과 모델을 거쳐서 가져올 결과값을 저장할 변수를 넣어줍니다.
  // input과 output형식은 모델에 따라 다르기 때문에 꼭 각자에 맞는 형식을 사용하세요.
  List<List<List<double>>> example_data2 = [
    [
      [5.27500000e-02, 4.38333333e-03, -1.18750000e-02],
      [5.17500000e-02, 7.38333333e-03, -1.28750000e-02],
      [5.67500000e-02, 1.83833333e-02, -2.38750000e-02],
      [5.57500000e-02, 3.83333333e-04, -1.48750000e-02],
      [5.37500000e-02, 3.83333333e-04, -1.58750000e-02],
      [5.87500000e-02, 6.38333333e-03, -1.28750000e-02],
      [5.97500000e-02, 1.03833333e-02, -1.38750000e-02],
      [5.87500000e-02, 1.33833333e-02, -1.38750000e-02],
      [5.87500000e-02, 1.23833333e-02, -1.38750000e-02],
      [5.97500000e-02, 1.23833333e-02, -1.68750000e-02],
      [6.07500000e-02, 1.33833333e-02, -1.38750000e-02],
      [5.97500000e-02, 1.53833333e-02, -1.18750000e-02],
      [5.87500000e-02, 8.38333333e-03, -1.48750000e-02],
      [6.07500000e-02, 1.23833333e-02, -1.98750000e-02],
      [6.07500000e-02, 1.23833333e-02, -1.48750000e-02],
      [5.97500000e-02, 1.43833333e-02, -1.58750000e-02],
      [5.97500000e-02, 1.33833333e-02, -1.48750000e-02],
      [-1.12500000e-02, 2.33833333e-02, -5.48750000e-02],
      [-2.81250000e-01, -1.36166667e-02, 9.81250000e-02],
      [-3.34250000e-01, -2.26166667e-02, 1.19125000e-01],
      [-3.57250000e-01, -2.06166667e-02, 1.24125000e-01],
      [-4.08250000e-01, -2.06166667e-02, 1.57125000e-01],
      [-4.12250000e-01, -1.66166667e-02, 1.69125000e-01],
      [-4.10250000e-01, -1.16166667e-02, 1.63125000e-01],
      [-4.08250000e-01, -8.61666667e-03, 1.66125000e-01],
      [-4.06250000e-01, -1.56166667e-02, 1.64125000e-01],
      [-2.69250000e-01, -6.16666667e-04, 9.51250000e-02],
      [-9.92500000e-02, -3.61666667e-03, 2.12500000e-03],
      [-4.22500000e-02, -1.13616667e-01, -1.48750000e-02],
      [4.75000000e-03, -4.26166667e-02, -6.87500000e-03],
      [4.75000000e-03, -4.06166667e-02, -3.87500000e-03],
      [1.57500000e-02, -2.56166667e-02, -1.38750000e-02],
      [1.57500000e-02, -1.66166667e-02, -6.87500000e-03],
      [1.47500000e-02, -1.26166667e-02, -7.87500000e-03],
      [1.97500000e-02, -1.06166667e-02, -9.87500000e-03],
      [1.67500000e-02, -1.26166667e-02, -7.87500000e-03],
      [1.47500000e-02, -1.36166667e-02, -9.87500000e-03],
      [1.37500000e-02, -1.36166667e-02, -9.87500000e-03],
      [1.47500000e-02, -1.36166667e-02, -7.87500000e-03],
      [1.37500000e-02, -1.26166667e-02, -3.87500000e-03],
      [1.37500000e-02, -1.46166667e-02, -8.87500000e-03],
      [1.27500000e-02, -1.56166667e-02, -5.87500000e-03],
      [1.17500000e-02, -1.66166667e-02, -8.87500000e-03],
      [1.17500000e-02, -1.66166667e-02, -6.87500000e-03],
      [1.37500000e-02, -1.56166667e-02, -7.87500000e-03],
      [1.17500000e-02, -1.56166667e-02, -1.08750000e-02],
      [1.07500000e-02, -1.66166667e-02, -8.87500000e-03],
      [1.07500000e-02, -1.56166667e-02, -4.87500000e-03],
      [1.07500000e-02, -1.66166667e-02, -8.87500000e-03],
      [9.75000000e-03, -1.56166667e-02, -7.87500000e-03],
      [1.17500000e-02, -1.46166667e-02, -7.87500000e-03],
      [1.27500000e-02, -1.66166667e-02, -9.87500000e-03],
      [1.17500000e-02, -1.46166667e-02, -7.87500000e-03],
      [1.17500000e-02, -1.46166667e-02, -6.87500000e-03],
      [9.75000000e-03, -1.56166667e-02, -1.08750000e-02],
      [1.17500000e-02, -1.46166667e-02, -9.87500000e-03],
      [1.27500000e-02, -1.46166667e-02, -8.87500000e-03],
      [2.57500000e-02, 3.03833333e-02, -9.87500000e-03],
      [3.47500000e-02, -5.61666667e-03, -2.08750000e-02],
      [3.47500000e-02, -2.61666667e-03, -1.18750000e-02],
      [3.47500000e-02, 7.38333333e-03, -2.28750000e-02],
      [3.47500000e-02, 7.38333333e-03, 1.25000000e-04],
      [3.57500000e-02, 7.38333333e-03, -9.87500000e-03],
      [3.57500000e-02, 7.38333333e-03, -9.87500000e-03],
      [3.37500000e-02, 7.38333333e-03, -1.38750000e-02],
      [3.57500000e-02, 9.38333333e-03, -1.18750000e-02],
      [3.57500000e-02, 9.38333333e-03, -8.87500000e-03],
      [3.57500000e-02, 7.38333333e-03, -1.18750000e-02],
      [3.67500000e-02, 8.38333333e-03, -1.18750000e-02],
      [3.57500000e-02, 8.38333333e-03, -1.18750000e-02],
      [3.57500000e-02, 7.38333333e-03, -1.18750000e-02],
      [3.47500000e-02, 9.38333333e-03, -7.87500000e-03],
      [3.47500000e-02, 8.38333333e-03, -1.08750000e-02],
      [3.47500000e-02, 9.38333333e-03, -8.87500000e-03],
      [3.47500000e-02, 8.38333333e-03, -9.87500000e-03],
      [3.47500000e-02, 8.38333333e-03, -1.18750000e-02],
      [3.47500000e-02, 7.38333333e-03, -1.08750000e-02],
      [3.47500000e-02, 7.38333333e-03, -1.18750000e-02],
      [3.47500000e-02, 1.03833333e-02, -9.87500000e-03],
      [3.37500000e-02, 9.38333333e-03, -1.18750000e-02],
      [3.17500000e-02, 7.38333333e-03, -7.87500000e-03],
      [3.37500000e-02, 8.38333333e-03, -1.18750000e-02],
      [3.57500000e-02, 8.38333333e-03, -9.87500000e-03],
      [3.37500000e-02, 8.38333333e-03, -1.18750000e-02],
      [3.37500000e-02, 7.38333333e-03, -1.18750000e-02],
      [3.27500000e-02, 7.38333333e-03, -1.18750000e-02],
      [3.27500000e-02, 6.38333333e-03, -9.87500000e-03],
      [3.17500000e-02, 6.38333333e-03, -8.87500000e-03],
      [3.17500000e-02, 6.38333333e-03, -1.08750000e-02],
      [3.27500000e-02, 5.38333333e-03, -1.18750000e-02],
      [3.37500000e-02, 6.38333333e-03, -9.87500000e-03],
      [3.17500000e-02, 3.38333333e-03, -1.38750000e-02],
      [3.27500000e-02, 5.38333333e-03, -1.28750000e-02],
      [3.17500000e-02, 5.38333333e-03, -1.08750000e-02],
      [3.17500000e-02, 6.38333333e-03, -9.87500000e-03],
      [3.27500000e-02, 5.38333333e-03, -1.18750000e-02],
      [3.17500000e-02, 5.38333333e-03, -1.28750000e-02],
      [3.27500000e-02, 6.38333333e-03, -1.08750000e-02],
      [3.17500000e-02, 5.38333333e-03, -9.87500000e-03],
      [3.17500000e-02, 7.38333333e-03, -1.18750000e-02],
      [3.27500000e-02, 8.38333333e-03, -1.08750000e-02],
      [3.27500000e-02, 6.38333333e-03, -9.87500000e-03],
      [3.27500000e-02, 1.03833333e-02, -8.87500000e-03],
      [3.17500000e-02, 8.38333333e-03, -1.08750000e-02],
      [3.17500000e-02, 8.38333333e-03, -9.87500000e-03],
      [3.17500000e-02, 9.38333333e-03, -1.18750000e-02],
      [3.37500000e-02, 8.38333333e-03, -1.18750000e-02],
      [3.37500000e-02, 1.03833333e-02, -9.87500000e-03],
      [3.37500000e-02, 9.38333333e-03, -1.08750000e-02],
      [3.37500000e-02, 1.23833333e-02, -1.18750000e-02],
      [3.27500000e-02, 1.13833333e-02, -1.18750000e-02],
      [3.17500000e-02, 1.33833333e-02, -1.48750000e-02],
      [3.27500000e-02, 1.23833333e-02, -1.08750000e-02],
      [3.27500000e-02, 1.23833333e-02, -8.87500000e-03],
      [3.17500000e-02, 1.13833333e-02, -1.08750000e-02],
      [3.37500000e-02, 1.23833333e-02, -1.18750000e-02],
      [3.27500000e-02, 1.13833333e-02, -1.08750000e-02],
      [3.27500000e-02, 1.23833333e-02, -1.08750000e-02],
      [3.17500000e-02, 1.23833333e-02, -1.18750000e-02],
      [3.27500000e-02, 1.03833333e-02, -8.87500000e-03]
    ]
  ];
  List<List<double>> example_3 = [
    [1.49400000e-01, -1.25525000e+00, -1.53516667e-01],
    [1.37840000e+00, 2.03750000e-01, 1.85548333e+00],
    [-1.82960000e+00, -1.75225000e+00, -1.42251667e+00],
    [3.94400000e-01, 2.09750000e-01, -3.34516667e-01],
    [-8.33600000e-01, 4.65750000e-01, 6.96483333e-01],
    [7.15400000e-01, 1.05875000e+00, -1.68751667e+00],
    [3.92400000e-01, 1.28775000e+00, -1.62451667e+00],
    [-6.89600000e-01, -4.02250000e-01, 8.42483333e-01],
    [-9.64600000e-01, 1.28775000e+00, 1.62483333e-01],
    [1.07440000e+00, 9.70750000e-01, 1.34448333e+00],
    [-1.47260000e+00, -1.31425000e+00, -5.29516667e-01],
    [1.07640000e+00, 1.28775000e+00, 4.07483333e-01],
    [6.22400000e-01, -2.29925000e+00, 6.86483333e-01],
    [-1.08760000e+00, -6.17250000e-01, -1.77516667e-01],
    [8.44000000e-02, -2.95250000e-01, 5.63483333e-01],
    [-1.61600000e-01, -4.45250000e-01, -2.45166667e-02],
    [4.65400000e-01, -4.17250000e-01, -5.45166667e-02],
    [-7.74600000e-01, -4.49250000e-01, -6.00516667e-01],
    [5.18400000e-01, -4.77250000e-01, 3.48333333e-03],
    [-1.00260000e+00, -5.53250000e-01, -4.26516667e-01],
    [-1.06560000e+00, -2.39250000e-01, 1.39483333e-01],
    [-6.19600000e-01, 1.13675000e+00, -2.15166667e-02],
    [-6.87600000e-01, 1.75000000e-03, 1.50483333e-01],
    [1.59040000e+00, 1.28275000e+00, -1.68751667e+00],
    [-5.35600000e-01, -1.27250000e-01, -8.53516667e-01],
    [1.59040000e+00, -4.38250000e-01, -1.68751667e+00],
    [1.51540000e+00, 6.15750000e-01, 2.02748333e+00],
    [-8.84600000e-01, 8.03750000e-01, 1.51483333e-01],
    [9.61400000e-01, -1.09425000e+00, 1.73748333e+00],
    [3.25400000e-01, 2.06750000e-01, -1.02516667e-01],
    [1.40400000e-01, -6.64250000e-01, -4.03516667e-01],
    [9.06400000e-01, 1.28775000e+00, -1.11251667e+00],
    [-2.16000000e-02, 4.67500000e-02, 1.67483333e-01],
    [-5.60000000e-03, 2.31750000e-01, 3.64833333e-02],
    [3.79400000e-01, 1.10750000e-01, -3.75166667e-02],
    [5.10400000e-01, 2.16750000e-01, 4.12483333e-01],
    [-2.20600000e-01, 7.77500000e-02, 9.74833333e-02],
    [-1.58600000e-01, 2.18750000e-01, 1.99483333e-01],
    [-1.29600000e-01, 2.04750000e-01, 2.68483333e-01],
    [3.54000000e-02, 7.27500000e-02, 2.90483333e-01],
    [9.40000000e-03, 7.27500000e-02, 2.17483333e-01],
    [-4.06000000e-02, 4.97500000e-02, 1.51483333e-01],
    [-2.86000000e-02, 1.10750000e-01, 2.01483333e-01],
    [-9.26000000e-02, 1.18750000e-01, 1.77483333e-01],
    [7.40000000e-03, 6.57500000e-02, 9.44833333e-02],
    [3.84000000e-02, 6.77500000e-02, 1.49483333e-01],
    [-6.60000000e-03, 5.87500000e-02, 5.34833333e-02],
    [4.74000000e-02, 4.87500000e-02, 1.68483333e-01],
    [1.07400000e-01, 7.50000000e-04, 1.55483333e-01],
    [1.43400000e-01, -9.25000000e-03, 1.78483333e-01],
    [3.74000000e-02, -2.42500000e-02, 1.30483333e-01],
    [4.14400000e-01, -6.84250000e-01, -3.21516667e-01],
    [2.64000000e-02, 1.77500000e-02, -1.06516667e-01],
    [-1.89600000e-01, 4.53750000e-01, -4.49516667e-01],
    [-2.83600000e-01, -5.12500000e-02, 8.94833333e-02],
    [-2.61600000e-01, 2.76750000e-01, -1.20516667e-01],
    [2.24000000e-02, -5.62500000e-02, -4.05166667e-02],
    [-2.76000000e-02, 3.37500000e-02, 2.74483333e-01],
    [-8.56000000e-02, 1.40750000e-01, 1.58483333e-01],
    [-5.96000000e-02, 1.64750000e-01, 1.87483333e-01],
    [-1.16600000e-01, 2.17750000e-01, 1.55483333e-01],
    [-7.06000000e-02, 2.77500000e-02, -1.05166667e-02],
    [-1.49600000e-01, 1.72750000e-01, 4.04833333e-02],
    [-4.66000000e-02, 2.37500000e-02, 5.84833333e-02],
    [-1.96000000e-02, -1.27250000e-01, 8.34833333e-02],
    [-6.56000000e-02, -7.12500000e-02, -8.85166667e-02],
    [-5.11600000e-01, -1.63250000e-01, -3.13516667e-01],
    [1.38940000e+00, -1.50250000e-01, 1.15448333e+00],
    [5.03400000e-01, -4.25000000e-03, 6.04833333e-02],
    [9.54000000e-02, -2.20250000e-01, 6.48333333e-03],
    [-1.78600000e-01, -3.55250000e-01, -1.50516667e-01],
    [1.21400000e-01, -6.12500000e-02, -1.25166667e-02],
    [-9.46000000e-02, -4.32500000e-02, -1.55516667e-01],
    [-1.04600000e-01, -7.42500000e-02, -1.54516667e-01],
    [-1.46600000e-01, 1.97500000e-02, -2.85166667e-02],
    [-1.61600000e-01, -2.32500000e-02, -1.89516667e-01],
    [-1.16600000e-01, 5.07500000e-02, -7.85166667e-02],
    [-1.64600000e-01, 6.75000000e-03, -2.65166667e-02],
    [-1.13600000e-01, 1.17500000e-02, -3.85166667e-02],
    [-4.56000000e-02, 6.75000000e-03, 5.48333333e-03],
    [-2.60000000e-03, -2.62500000e-02, -7.51666667e-03],
    [1.37400000e-01, -7.22500000e-02, 4.83333333e-04],
    [-2.26600000e-01, -7.52500000e-02, -3.87516667e-01],
    [-3.22600000e-01, 6.47500000e-02, -1.67516667e-01],
    [-4.53600000e-01, -2.04250000e-01, -4.36516667e-01],
    [-3.76000000e-02, -4.22500000e-02, -1.74516667e-01],
    [-2.93600000e-01, 1.07500000e-02, -2.68516667e-01],
    [3.32400000e-01, -4.32500000e-02, -8.95166667e-02],
    [3.75400000e-01, -1.11250000e-01, -2.77516667e-01],
    [-5.47600000e-01, -3.42250000e-01, -5.73516667e-01],
    [3.98400000e-01, -9.12500000e-02, 1.07483333e-01],
    [-7.36000000e-02, 9.67500000e-02, -1.13516667e-01],
    [2.48400000e-01, -1.48250000e-01, 2.94833333e-02],
    [-5.66000000e-02, -1.32250000e-01, -7.85166667e-02],
    [-1.45600000e-01, 2.47500000e-02, -8.95166667e-02],
    [-1.02600000e-01, 3.27500000e-02, -1.22516667e-01],
    [5.64000000e-02, 2.77500000e-02, 4.64833333e-02],
    [-6.96000000e-02, 5.47500000e-02, -5.51666667e-03],
    [1.94000000e-02, 1.57500000e-02, 1.10483333e-01],
    [-6.96000000e-02, 2.97500000e-02, 9.64833333e-02],
    [-5.56000000e-02, -4.92500000e-02, 1.13483333e-01],
    [-3.26000000e-02, 4.07500000e-02, 5.04833333e-02],
    [-2.66000000e-02, 3.57500000e-02, 5.74833333e-02],
    [-2.96000000e-02, 7.87500000e-02, 4.04833333e-02],
    [-6.46000000e-02, 3.57500000e-02, 6.04833333e-02],
    [-5.46000000e-02, 5.17500000e-02, 4.54833333e-02],
    [-7.16000000e-02, 1.27500000e-02, 6.24833333e-02],
    [-4.96000000e-02, 5.97500000e-02, 1.12483333e-01],
    [-7.96000000e-02, 8.07500000e-02, 6.34833333e-02],
    [7.40000000e-03, -9.25000000e-03, -4.95166667e-02],
    [-2.36000000e-02, 2.75000000e-03, 9.34833333e-02],
    [-9.06000000e-02, -2.12500000e-02, 3.14833333e-02],
    [1.22400000e-01, 2.87500000e-02, -3.75166667e-02],
    [7.74000000e-02, -4.82500000e-02, 8.14833333e-02],
    [3.84000000e-02, -3.12500000e-02, 3.64833333e-02],
    [-3.56000000e-02, -5.62500000e-02, 1.24483333e-01],
    [-1.72600000e-01, 7.50000000e-04, 6.34833333e-02],
    [-4.16000000e-02, 7.57500000e-02, 2.17483333e-01],
    [-1.60000000e-03, 2.77500000e-02, 1.56483333e-01],
    [-4.36000000e-02, 6.87500000e-02, 1.10483333e-01]
  ];
  List<List<double>> example_4 = [
    [0.03358333, 0.22109167, 0.27020833],
    [-0.02541667, 0.41009167, 0.31020833],
    [-0.06741667, 0.27109167, 0.19020833],
    [-0.09241667, 0.28009167, 0.29720833],
    [0.03158333, 0.20709167, 0.29520833],
    [0.03558333, 0.23909167, 0.33320833],
    [-0.04141667, 0.29809167, 0.13620833],
    [-0.08241667, 0.23609167, 0.33720833],
    [0.02458333, 0.18809167, 0.25920833],
    [-0.02841667, 0.27609167, 0.06820833],
    [-0.11641667, 0.19809167, 0.34820833],
    [-0.00841667, 0.17209167, 0.26020833],
    [0.13158333, 0.19309167, 0.12920833],
    [0.09858333, 0.14809167, 0.25820833],
    [0.06058333, 0.25109167, 0.29420833],
    [-0.03241667, 0.26609167, 0.24520833],
    [0.03258333, 0.19609167, 0.41220833],
    [0.06458333, 0.15809167, 0.26220833],
    [0.08758333, 0.23209167, 0.41720833],
    [-0.01841667, 0.24109167, 0.28620833],
    [-0.02841667, 0.27509167, 0.27920833],
    [-0.01541667, 0.25909167, 0.36820833],
    [-0.02041667, 0.27709167, 0.37520833],
    [-0.05641667, 0.18709167, 0.24420833],
    [0.00358333, 0.29709167, 0.29020833],
    [-0.03541667, 0.24309167, 0.35620833],
    [0.02358333, 0.19909167, 0.28420833],
    [-0.04341667, 0.23709167, 0.28120833],
    [0.11558333, 0.18909167, 0.08520833],
    [-0.01441667, 0.18709167, 0.37120833],
    [-0.12241667, 0.11309167, 0.30820833],
    [-0.04741667, -0.16990833, 0.30820833],
    [0.31558333, 1.42409167, 0.12720833],
    [1.62058333, -0.49990833, -0.07279167],
    [-0.43641667, -0.50790833, -0.97679167],
    [-1.32341667, 0.50509167, -1.45079167],
    [-1.49641667, 1.48309167, -1.39879167],
    [1.37458333, -0.76190833, 1.22920833],
    [0.15758333, -0.49190833, 0.36220833],
    [-0.76541667, 0.18209167, 0.05020833],
    [0.14058333, -0.05690833, 0.27420833],
    [0.96758333, 0.49409167, 0.49120833],
    [1.13958333, -0.12690833, 0.38420833],
    [0.12258333, 0.74309167, -0.00179167],
    [0.19558333, 0.36209167, 0.05420833],
    [0.02858333, 0.75509167, -0.20379167],
    [-0.26241667, 0.46809167, -0.23479167],
    [-0.40541667, 0.12609167, -0.55379167],
    [-0.64941667, 0.16609167, 0.09620833],
    [-0.38641667, 0.30609167, 0.12620833],
    [0.29458333, 0.19109167, -0.27679167],
    [0.16658333, 0.15609167, 0.30820833],
    [-0.52941667, 0.28209167, -0.37679167],
    [-0.48141667, 0.14709167, -0.17279167],
    [-0.75341667, 0.69909167, 0.28020833],
    [-0.26441667, 0.12509167, -0.12279167],
    [-0.22041667, 0.08709167, 0.38020833],
    [-0.43141667, 0.45009167, 0.33320833],
    [-0.10541667, 0.21309167, -0.45779167],
    [-0.29041667, 0.28509167, -0.18979167],
    [0.01758333, 0.64109167, 0.12720833],
    [0.16258333, 0.09109167, -0.10679167],
    [-0.58341667, -0.11390833, -1.04879167],
    [-0.13841667, -0.35090833, -0.37179167],
    [0.02158333, -0.24290833, -0.30179167],
    [0.29258333, -0.33390833, -0.11479167],
    [0.04358333, -0.51490833, -0.18079167],
    [0.06958333, -0.40490833, -0.24279167],
    [0.01558333, -0.45890833, -0.23379167],
    [0.01658333, -0.47590833, -0.33579167],
    [0.08458333, -0.46390833, -0.27979167],
    [-0.04341667, -0.50590833, -0.19379167],
    [-0.01441667, -0.51490833, -0.30279167],
    [-0.07441667, -0.43590833, -0.27979167],
    [0.00358333, -0.60590833, -0.32779167],
    [0.16758333, -0.52990833, -0.13379167],
    [-0.10641667, -0.05990833, -0.18579167],
    [-0.09241667, 0.07609167, -0.07779167],
    [-0.10941667, 0.08609167, -0.08679167],
    [0.00258333, 0.04509167, -0.06479167],
    [-0.03041667, -0.24790833, -0.24179167],
    [0.27358333, -0.36790833, -0.03379167],
    [0.15558333, 0.24209167, 0.16220833],
    [-0.00241667, 0.23709167, 0.26820833],
    [-0.23841667, 0.32209167, 0.12520833],
    [-0.23841667, 0.21209167, -0.17779167],
    [0.20958333, -0.37190833, -0.19979167],
    [0.12058333, -0.41390833, -0.36379167],
    [0.13358333, -0.54690833, -0.08779167],
    [0.13358333, -0.51690833, -0.30579167],
    [0.09458333, -0.49090833, -0.02679167],
    [0.08458333, -0.51090833, -0.22879167],
    [0.10358333, -0.48690833, -0.22579167],
    [0.20358333, -0.41690833, -0.23579167],
    [0.09858333, -0.44990833, -0.20379167],
    [0.16058333, -0.60090833, -0.14079167],
    [0.12258333, -0.53290833, -0.14679167],
    [0.08758333, -0.33890833, -0.13879167],
    [0.05758333, -0.42690833, -0.10679167],
    [0.11158333, -0.44890833, -0.08979167],
    [0.21458333, -0.50590833, -0.17779167],
    [0.16058333, -0.42990833, -0.16579167],
    [0.10658333, -0.29190833, -0.14679167],
    [0.17958333, -0.44290833, -0.15979167],
    [0.09858333, -0.56990833, -0.16679167],
    [0.24958333, -0.44090833, -0.10579167],
    [0.17958333, -0.44990833, -0.15279167],
    [0.03958333, -0.47190833, -0.11179167],
    [0.21558333, -0.50590833, -0.08379167],
    [0.16558333, -0.38190833, -0.15079167],
    [0.16858333, -0.00190833, -0.03879167],
    [0.02358333, 0.26309167, 0.21420833],
    [-0.09141667, 0.27309167, 0.25920833],
    [-0.05341667, 0.24409167, 0.35720833],
    [-0.14941667, 0.30509167, 0.24420833],
    [-0.08241667, 0.23709167, 0.18020833],
    [-0.23541667, 0.31809167, 0.02020833],
    [0.07658333, -0.37690833, -0.18979167],
    [-0.01341667, -0.10590833, 0.44620833],
    [-0.19941667, 0.38209167, 0.10220833]
  ];
  List<List<double>> output = [
    [0, 0, 0]
  ];
  interpreter.run(example_4, output);

  // 모델 실행한 결과를 변수에 저장합니다. 저는 output이 (1,7)이므로 첫번 째 인덱스를 가져왔습니다.

  int maxIndex = output[0].indexOf(output[0].reduce((a, b) => a > b ? a : b));

  print(maxIndex);
}
